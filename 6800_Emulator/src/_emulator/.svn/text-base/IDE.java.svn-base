/*
 * Ketler Simulator
 * IDE GUI
 *
 * Copyright 2011 David Ketler 3394947, Brock University
 *
 * This file is part of the Ketler Simulator.

The Ketler Simulator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Ketler Simulator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Ketler Simulator.  If not, see <http://www.gnu.org/licenses/>.
 */
package _emulator;

import java.io.*;
import javax.swing.*;
import javax.swing.text.Document;
import java.awt.Color;
import java.awt.Font;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;
import javax.swing.text.Element;
import org.jdesktop.application.SingleFrameApplication;

import java.awt.FileDialog;

/**
 *
 * @author dak
 */
public class IDE extends javax.swing.JFrame implements DocumentListener {
    SingleFrameApplication applic;
    pallet p;
    File f;
    private Document doc;
    CPU proc = new CPU();
    JTextArea lines;
    protected UndoManager undoManager = new UndoManager();
    _EmulatorView v;
    File s19;
    fileParser load = new fileParser();
    boolean pallet = false;
    
    /** Creates new form IDE */
    public IDE(SingleFrameApplication app) {
        initComponents();
        addListener();
        addNumbers();
        applic = app;
        v = new _EmulatorView(applic);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();

        jMenuBar2.setName("jMenuBar2"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(_emulator._EmulatorApp.class).getContext().getResourceMap(IDE.class);
        jMenu3.setText(resourceMap.getString("jMenu3.text")); // NOI18N
        jMenu3.setName("jMenu3"); // NOI18N
        jMenuBar2.add(jMenu3);

        jMenu4.setText(resourceMap.getString("jMenu4.text")); // NOI18N
        jMenu4.setName("jMenu4"); // NOI18N
        jMenuBar2.add(jMenu4);

        jMenuBar3.setName("jMenuBar3"); // NOI18N

        jMenu5.setText(resourceMap.getString("jMenu5.text")); // NOI18N
        jMenu5.setName("jMenu5"); // NOI18N
        jMenuBar3.add(jMenu5);

        jMenu6.setText(resourceMap.getString("jMenu6.text")); // NOI18N
        jMenu6.setName("jMenu6"); // NOI18N
        jMenuBar3.add(jMenu6);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N
        setResizable(false);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane1.setViewportView(jTextArea1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setName("jTextArea2"); // NOI18N
        jScrollPane2.setViewportView(jTextArea2);

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel1.setName("jLabel1"); // NOI18N

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setName("jLabel2"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText(resourceMap.getString("jMenuItem3.text")); // NOI18N
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(resourceMap.getString("jMenu2.text")); // NOI18N
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
        jMenuItem4.setName("jMenuItem4"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText(resourceMap.getString("jMenuItem5.text")); // NOI18N
        jMenuItem5.setName("jMenuItem5"); // NOI18N
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu7.setText(resourceMap.getString("jMenu7.text")); // NOI18N
        jMenu7.setName("jMenu7"); // NOI18N

        jMenuItem6.setText(resourceMap.getString("jMenuItem6.text")); // NOI18N
        jMenuItem6.setName("jMenuItem6"); // NOI18N
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem6);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(215, 215, 215)
                        .add(jLabel2))
                    .add(layout.createSequentialGroup()
                        .add(11, 11, 11)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jSeparator1)
                            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 650, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                        .add(jLabel1)))
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(60, 60, 60)
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 67, Short.MAX_VALUE)
                .add(jButton3)
                .add(58, 58, 58)
                .add(jButton2)
                .add(64, 64, 64)
                .add(jButton4)
                .add(76, 76, 76))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 384, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton4)
                            .add(jButton2)
                            .add(jButton3)
                            .add(jButton1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(62, 62, 62)
                        .add(jLabel1)
                        .add(385, 385, 385)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        proc = v.processor;
        if(!pallet) {
            p = new pallet();
            p.setVisible(true);
            v.getApplication().show(v);
            v.processor.loadSettings();
            p.proc = v.processor;
            pallet = true;
        }
        else
            return;
}//GEN-LAST:event_jButton1ActionPerformed
    
    /*
     * addListener
     * Method to add the undo listener to the text area
     * to allow for undo/redo of text entry events
     *
     * @param void
     * @return void
     */
    private void addListener() {
        Font font = new Font("Console",Font.PLAIN, 12);

        jTextArea1.setFont(font);
        jTextArea1.getDocument().addDocumentListener(this);
        jTextArea1.getDocument().addUndoableEditListener(
        new UndoableEditListener() {
          public void undoableEditHappened(UndoableEditEvent e) {
            undoManager.addEdit(e.getEdit());    }
        });
        
    }//addListener

    private void addNumbers() {
        /* Set up line numbers */
        lines = new JTextArea("1");
        Font font = new Font("Console",Font.PLAIN, 12);
        lines.setFont(font);
        lines.setBackground(Color.LIGHT_GRAY);
        lines.setEditable(false);
        
        jScrollPane1.setRowHeaderView(lines);
    }

    /* Document Listener Events */
	public void changedUpdate(DocumentEvent de) {
		lines.setText(getText());
	}
	public void insertUpdate(DocumentEvent de) {
		lines.setText(getText());
	}
	public void removeUpdate(DocumentEvent de) {
		lines.setText(getText());
	}
	public String getText(){
		int caretPosition = jTextArea1.getDocument().getLength();
		Element root = jTextArea1.getDocument().getDefaultRootElement();
		String text = "1\n";
		for(int i = 2; i < root.getElementIndex( caretPosition ) + 2; i++)
			text += i + "\n";
		return text;
	}


    /*
     * Method to load an .asm file into the text area for editing
     *
     * Launches a FileChooser and loads the file, setting the contents
     * to the text area
     * 
     * @param ActionEvent
     * @return void
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JFileChooser jFileChooser1 = new JFileChooser();

        int returnVal = jFileChooser1.showOpenDialog(this);
        f = jFileChooser1.getSelectedFile();
        if(f != null) {
        try {
            BufferedReader br = new BufferedReader(new FileReader(f));
            FileReader in = new FileReader(f);

            String s;
            jTextArea1.setText(null);
            jTextArea1.setTabSize(4); //oh thank god
            while((s = br.readLine()) != null) {
                jTextArea1.append(s +"\n");
            }

        } catch(Exception e) { } }//if
}//GEN-LAST:event_jMenuItem1ActionPerformed

    /*
     * Method to save the contents of the textarea to a file
     * Simply writes verbatim the contents of the area to a .asm file
     *
     * @param ActionEvent
     * @return void
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String s = jTextArea1.getText();

        JFileChooser jFileChooser1 = new JFileChooser();

        int returnVal = jFileChooser1.showOpenDialog(this);
        f = jFileChooser1.getSelectedFile();

        try {
            BufferedWriter br = new BufferedWriter(new FileWriter(f));

            br.write(s);
            br.close();

        } catch(Exception e) { }

        jTextArea1.setText(s);
}//GEN-LAST:event_jMenuItem2ActionPerformed

    /*
     * Exit File menu option
     * calls system.exit() to quit the application
     *
     * @param ActionEvent
     * @return void
     */
    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
}//GEN-LAST:event_jMenuItem3ActionPerformed

    /*
     * Method to assemble the .asm file using the AS assembler
     * forces the user to save the file first if not saved,
     * strips comments (cleanFile()) and creates a temp file, calls the assembler
     * on the temp file, calls p2hex to convert the output to an s19 file for
     * the emulator (makeS19()). Then removes all temporary files.
     *
     * @param ActionEvent
     * @return void
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String assemblePath = "";
        String fileName;
        String filePath ="";
        String fileNoExtension = "";

        if(f == null) {
            JOptionPane.showMessageDialog(this, "Please save your code file.");
            return;
        }
        else {
            //save the file first
            String s = jTextArea1.getText();
            try {
                BufferedWriter br = new BufferedWriter(new FileWriter(f));

                br.write(s);
                br.close();

            } catch (Exception e) { }

            //setup our files for assembling
            fileName = f.getName();
            filePath = f.getAbsolutePath().replace(fileName, "");
            int extension = fileName.lastIndexOf('.');
            fileName = fileName.substring(0, extension);
            fileNoExtension = fileName;
            fileName = fileName.concat(".s19");    //yay we have an s19 file now

            assemblePath = filePath.concat(fileNoExtension);
        }//parse file info

        try {
            cleanFile(f);
            Runtime rt = Runtime.getRuntime();
            Process p = rt.exec("C:\\bin\\asw.exe -x -cpu 6800 " +filePath +"temp.asm");
            BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
            OutputStream out = p.getOutputStream();
            InputStream err = p.getErrorStream();
            BufferedReader error = new BufferedReader(new InputStreamReader(err));

            String line;
            String errorLine;

            while((line = input.readLine()) != null) {
                if(line.contains("temp.asm"))
                    line = line.replace("temp", fileNoExtension);
                else if(line.contains("assembly time")) {
                    while((errorLine = error.readLine()) != null)
                        jTextArea2.append(errorLine +"\n");
                    jTextArea2.append("\n");
                }//std error loop

                jTextArea2.append(line +"\n");
            }

            while((line = error.readLine()) != null) {
                System.out.println(line);
            }

            input.close();
            p.destroy();

            System.out.println(assemblePath);
            rt = Runtime.getRuntime();
            p = rt.exec("cmd /c c:\\bin\\p2hex.exe -F Moto +5 -r $0000-$FFFF " +filePath +"temp.p");
            input = new BufferedReader(new InputStreamReader(p.getInputStream()));
            out = p.getOutputStream();
            err = p.getErrorStream();
            error = new BufferedReader(new InputStreamReader(err));

            while((line = error.readLine()) != null) {
                System.out.println(line);
            }
            input.close();
            p.destroy();
            //change to an s19 file for cleanliness sake
            makeS19(new File(filePath +"temp.hex"),fileNoExtension);

            //delete intermediary files
            File hex = new File(filePath +"temp.hex");
            hex.delete();
            File p_ = new File(filePath +"temp.p");
            p_.delete();
            File tmp = new File(filePath + "temp.asm");
            tmp.delete();
        }
        catch(Exception e) {}
    }//GEN-LAST:event_jButton3ActionPerformed

    /*
     * Undo
     */
    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        try {
          undoManager.undo();
        } catch (CannotRedoException cre) {}
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /*
     * Redo
     */
    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        try {
          undoManager.redo();
        } catch (CannotRedoException cre) {}
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        v.getApplication().show(v);
        proc = v.processor;
        v.processor.loadSettings();
        //p.proc = proc;
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        v.getApplication().show(v);
        proc = v.processor;
        load.parse(s19, proc);       
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        _EmulatorAboutBox about = new _EmulatorAboutBox(this);
        about.setVisible(true);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new IDE().setVisible(true);
            }
        });
    }

    /*
     * makeS19
     *
     * Method to strip the unnecessary header data from the file
     * and save an .s19 file for use by the emulator
     *
     * @param File
     * @return void
     */
    private void makeS19(File f, String name) {
        String fileName = f.getName();
        String filePath = f.getAbsolutePath().replace(fileName, "");
        int extension = fileName.lastIndexOf('.');
        //fileName = fileName.substring(0, extension);
        fileName = name.concat(".s19");    //yay we have an s19 file now

        String s;

        try {
            BufferedReader in = new BufferedReader(new FileReader(f));
            BufferedWriter out = new BufferedWriter(new FileWriter(new File(filePath + fileName)));
            System.out.println("S19 is " +filePath +fileName);
            while ((s = in.readLine()) != null) {
                out.write(s + "\n");
            }

            out.close();
            in.close();
            s19 = new File(filePath + fileName);
        } catch (Exception e) {System.out.println(e.toString());}
    }//makeS19


    /*
     * cleanFile
     *
     * Method to clean the comments out of the .asm file and save
     * the new clean file to a temporary file (temp.asm) which will be
     * assembled, and deleted afterward
     *
     * @param File
     * @return void
     */
    private void cleanFile(File f) {
        String s;
        String fileName = f.getName();
        String filePath = f.getAbsolutePath().replace(fileName,"");
        File temp = new File(filePath + "temp.asm");

        try {
            BufferedReader in = new BufferedReader(new FileReader(f));
            BufferedWriter out = new BufferedWriter(new FileWriter(temp));

            while((s = in.readLine()) != null) {
                if(s.startsWith("*"))
                    continue;

                //replace EOL comments
                s = s.replaceAll("\\(.*?\\)", "");

                out.write(s +"\n");
            }//while
            out.close();
            in.close();
        }
        catch(Exception e) {}
    }//cleanFile

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

}


